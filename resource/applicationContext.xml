<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
	http://www.springframework.org/schema/p http://www.springframework.org/schema/util/spring-p-3.2.xsd
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd ">

	<context:component-scan base-package="com.kh" />
	<context:annotation-config />
	<aop:aspectj-autoproxy />
	<mvc:annotation-driven />
	<mvc:default-servlet-handler />
	<mvc:view-controller path="" view-name="redirect:/index" />
	<mvc:view-controller path="/" view-name="redirect:/index" />

	<!-- <cache:annotation-driven cache-manager="cacheManager"/> -->

	<util:list id="propertiesResources" list-class="java.util.ArrayList">
		<value>classpath:jdbc.properties</value>
		<value>classpath:hibernate.properties</value>
	</util:list>

	<bean id="propertyCOnfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" ref="propertiesResources" />
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.user}" />
		<!--密码。Default: null -->
		<property name="password" value="${jdbc.password}" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<!--最大空闲时间,x秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		<!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出 SQLException,如设为0则无限期等待。单位毫秒。Default: 
			0 -->
		<property name="checkoutTimeout" value="${jdbc.checkoutTimeout}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}" />
		<!--两次连接中间隔时间，单位毫秒。Default: 1000 -->
		<property name="acquireRetryDelay" value="${jdbc.acquireRetryDelay}" />
		<!--连接关闭时默认将所有未提交的操作回滚。Default: false -->
		<property name="autoCommitOnClose" value="${jdbc.autoCommitOnClose}" />
		<!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么 属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试 
			使用。Default: null -->
		<property name="automaticTestTable" value="${jdbc.automaticTestTable}" />
		<!--通过实现ConnectionTester或QueryConnectionTester的类来测试连接。类名需制定全路径。 Default: 
			com.mchange.v2.c3p0.impl.DefaultConnectionTester -->
		<property name="connectionTesterClassName" value="${jdbc.connectionTesterClassName}" />
		<!--指定c3p0 libraries的路径，如果（通常都是这样）在本地即可获得那么无需设置，默认null即可 Default: null -->
		<property name="factoryClassLocation" value="${jdbc.factoryClassLocation}" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="${jdbc.breakAfterAcquireFailure}" />
		<!--x秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements" value="${jdbc.maxStatements}" />
		<!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
		<property name="maxStatementsPerConnection" value="${jdbc.maxStatementsPerConnection}" />
		<!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过多线程实现多个操作同时被执行。Default: 
			3 -->
		<property name="numHelperThreads" value="${jdbc.numHelperThreads}" />
		<!--当用户调用getConnection()时使root用户成为去获取连接的用户。主要用于连接池连接非c3p0 的数据源时。Default: 
			null -->
		<property name="overrideDefaultUser" value="${jdbc.overrideDefaultUser}" />
		<!--与overrideDefaultUser参数对应使用的一个参数。Default: null -->
		<property name="overrideDefaultPassword" value="${jdbc.overrideDefaultPassword}" />
		<!--定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个一显著提高测试速度。注意： 测试的表必须在初始数据源的时候就存在。Default: 
			null -->
		<property name="preferredTestQuery" value="${jdbc.preferredTestQuery}" />
		<!--用户修改系统配置参数执行前最多等待300秒。Default: 300 -->
		<property name="propertyCycle" value="${jdbc.propertyCycle}" />
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout" value="${jdbc.testConnectionOnCheckout}" />
		<!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false -->
		<property name="testConnectionOnCheckin" value="${jdbc.testConnectionOnCheckin}" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="configuration" value="classpath:WEB-INF/hibernate.cfg.xml" 
			/> -->
		<property name="packagesToScan">
			<list>
				<value>com.kh.entity.model</value>
				<value>com.kh.*.entity.model</value>
			</list>
		</property>
		<!-- <property name="mappingDirectoryLocations"> <list> <value>classpath:com/kh/entity/mapper/</value> 
			<value>classpath:com/kh/**/entity/mapper/</value> </list> </property> -->
		<property name="mappingLocations">
			<list>
				<value>classpath:com/kh/entity/mapper/*.hb.xml</value>
				<value>classpath:com/kh/**/entity/mapper/*.hb.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<!-- 设置数据库方言 -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!-- 设置自动创建|更新|验证数据库表结构 -->
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<!-- 是否在控制台显示sql -->
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<!-- 是否格式化sql，优化显示 -->
				<prop key="hiberante.format_sql">${hiberante.format_sql}</prop>
				<!-- 是否开启二级缓存 -->
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<!-- 是否开启查询缓存 -->
				<prop key=" hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<!-- 数据库批量查询最大数 -->
				<!-- <prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop> -->
				<!-- 数据库批量更新、添加、删除操作最大数 -->
				<!-- <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop> -->
				<!-- 是否自动提交事务 -->
				<prop key="hibernate.connection.autocommit">${hibernate.connection.autocommit}</prop>
				<!-- 指定hibernate在何时释放JDBC连接 -->
				<prop key="hibernate.connection.release_mode">${hibernate.connection.release_mode}</prop>
				<!-- 创建session方式 hibernate4.x 的方式 -->
				<prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}</prop>
				<!-- javax.persistence.validation.mode默认情况下是auto的，就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包 
					所以把它设置为none即可 -->
				<prop key="javax.persistence.validation.mode">${javax.persistence.validation.mode}</prop>
				<!-- 设置二级缓存插件EHCache的Provider类 hibernate4此属性作废 -->
				<!-- 
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				 -->
				<!-- 二级缓存区域名的前缀 -->
				<!-- <prop key="hibernate.cache.region_prefix">${hibernate.cache.region_prefix}</prop> -->
				<!-- 高速缓存提供程序 -->
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<!-- 指定缓存配置文件位置 -->
				<!-- 
				<prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.cache.provider_configuration_file_resource_path}
				</prop>
				 -->
				<!-- 强制Hibernate以更人性化的格式将数据存入二级缓存 -->
				<prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
				<!-- Hibernate将收集有助于性能调节的统计数据 -->
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<!--  Hibernate分页出现 ResultSet may only be accessed in a forward direction 需要设置hibernate结果集滚动 -->
				<prop key="jdbc.use_scrollable_resultset">false</prop>
			</props>
		</property>
	</bean>
	<!-- 
	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="cacheManager"></property>
	</bean>
	 -->

	<bean id="cacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml"></property>
		<property name="shared" value="true"></property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="update*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="Throwable" />
			<tx:method name="save*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="Throwable" />
			<tx:method name="delete*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="Throwable" />
			<tx:method name="search*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="Throwable" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:advisor pointcut="execution(* com.kh.*.*.service.*.*(..))"
			advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* com.kh.*.*.*.service.*.*(..))"
			advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* com.kh.*.*.*.*.service.*.*(..))"
			advice-ref="txAdvice" />
	</aop:config>

</beans>